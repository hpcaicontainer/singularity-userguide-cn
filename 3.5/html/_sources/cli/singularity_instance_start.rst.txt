.. _singularity_instance_start:

singularity instance start
--------------------------

Start a named instance of the given container image

Synopsis
~~~~~~~~



  The instance start command allows you to create a new named instance from an
  existing container image that will begin running in the background. If a
  startscript is defined in the container metadata the commands in that script
  will be executed with the instance start command as well. You can optionally
  pass arguments to startscript

  singularity instance start accepts the following container formats

  *.sif               Singularity Image Format (SIF). Native to Singularity 3.0+
  
  *.sqsh              SquashFS format.  Native to Singularity 2.4+

  *.img               ext3 format. Native to Singularity versions < 2.4.

  directory/          sandbox format. Directory containing a valid root file 
                      system and optionally Singularity meta-data.

  instance://*        A local running instance of a container. (See the instance
                      command group.)

  library://*         A container hosted on a Library (default 
                      https://cloud.sylabs.io/library)

  docker://*          A container hosted on Docker Hub

  shub://*            A container hosted on Singularity Hub

  oras://*            A container hosted on a supporting OCI registry

::

  singularity instance start [start options...] <container path> <instance name> [startscript args...]

Examples
~~~~~~~~

::


    $ singularity instance start /tmp/my-sql.sif mysql

    $ singularity shell instance://mysql
    Singularity my-sql.sif> pwd
    /home/mibauer/mysql
    Singularity my-sql.sif> ps
    PID TTY          TIME CMD
      1 pts/0    00:00:00 sinit
      2 pts/0    00:00:00 bash
      3 pts/0    00:00:00 ps
    Singularity my-sql.sif>

    $ singularity instance stop /tmp/my-sql.sif mysql
    Stopping /tmp/my-sql.sif mysql

Options
~~~~~~~

::

      --add-caps string        a comma separated capability list to add
      --allow-setuid           allow setuid binaries in container (root only)
      --apply-cgroups string   apply cgroups from file for container processes (root only)
  -B, --bind strings           a user-bind path specification.  spec has the format src[:dest[:opts]], where src and dest are outside and inside paths.  If dest is not given, it is set equal to src.  Mount options ('opts') may be specified as 'ro' (read-only) or 'rw' (read/write, which is the default). Multiple bind paths can be given by a comma separated list.
      --boot                   execute /sbin/init to boot container (root only)
  -e, --cleanenv               clean environment before running container
  -c, --contain                use minimal /dev and empty other directories (e.g. /tmp and $HOME) instead of sharing filesystems from your host
  -C, --containall             contain not only file systems, but also PID, IPC, and environment
      --disable-cache          dont use cache, and dont create cache
      --dns string             list of DNS server separated by commas to add in resolv.conf
      --docker-login           login to a Docker Repository interactively
      --drop-caps string       a comma separated capability list to drop
  -f, --fakeroot               run container in new user namespace as uid 0
  -h, --help                   help for start
  -H, --home string            a home directory specification.  spec can either be a src path or src:dest pair.  src is the source path of the home directory outside the container and dest overrides the home directory within the container. (default "/root")
      --hostname string        set container hostname
  -i, --ipc                    run container in a new IPC namespace
      --keep-privs             let root user keep privileges in container (root only)
  -n, --net                    run container in a new network namespace (sets up a bridge network interface by default)
      --network string         specify desired network type separated by commas, each network will bring up a dedicated interface inside container (default "bridge")
      --network-args strings   specify network arguments to pass to CNI plugins
      --no-home                do NOT mount users home directory if home is not the current working directory
      --no-init                do NOT start shim process with --pid
      --no-nv                  
      --no-privs               drop all privileges from root user in container)
      --nohttps                do NOT use HTTPS with the docker:// transport (useful for local docker registries without a certificate)
      --nv                     enable experimental Nvidia support
  -o, --overlay strings        use an overlayFS image for persistent data storage or as read-only layer of container
      --passphrase             prompt for an encryption passphrase
      --pem-path string        enter an path to a PEM formated RSA key for an encrypted container
  -p, --pid                    run container in a new PID namespace
      --pid-file string        write instance PID to the file with the given name
      --rocm                   enable experimental Rocm support
  -S, --scratch strings        include a scratch directory within the container that is linked to a temporary dir (use -W to force location)
      --security strings       enable security features (SELinux, Apparmor, Seccomp)
  -u, --userns                 run container in a new user namespace, allowing Singularity to run completely unprivileged on recent kernels. This disables some features of Singularity, for example it only works with sandbox images.
      --uts                    run container in a new UTS namespace
  -W, --workdir string         working directory to be used for /tmp, /var/tmp and $HOME (if -c/--contain was also used)
  -w, --writable               by default all Singularity containers are available as read only. This option makes the file system accessible as read/write.
      --writable-tmpfs         makes the file system accessible as read-write with non persistent data (with overlay support only)

SEE ALSO
~~~~~~~~

* :ref:`singularity instance <singularity_instance>` 	 - Manage containers running as services

*Auto generated by spf13/cobra on 12-May-2020*
